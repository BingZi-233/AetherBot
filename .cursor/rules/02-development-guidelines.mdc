---
description: 此文件详细说明了AetherBot项目的开发环境配置和编码规范，包含开发原则、代码风格和最佳实践。本文档旨在统一团队开发标准，确保代码质量和可维护性，所有开发者必须遵循这些规范进行开发工作。
globs: 
alwaysApply: false
---
# AetherBot 开发规范

> 此文件详细说明了AetherBot项目的开发环境配置和编码规范，包含开发原则、代码风格和最佳实践。本文档旨在统一团队开发标准，确保代码质量和可维护性，所有开发者必须遵循这些规范进行开发工作。

## 开发环境

### 基础环境
- **操作系统**: Windows
- **终端工具**: Git Shell
- **代码提交**: 使用Git进行版本控制
- **编码规范**: UTF-8编码

### 开发工具
- JDK 21
- Maven 3.x
- IntelliJ IDEA 或 Eclipse（配置Lombok支持）
- MySQL 8.x

### 环境变量配置
项目使用.env文件管理环境变量，开发时请复制.env.example并根据自己的环境配置：
- [.env.example](mdc:.env.example) - 环境变量模板
- 开发环境使用.env.dev
- 生产环境使用.env.prod

## 开发原则

### SOLID原则
- **单一职责原则 (SRP)**: 一个类只负责一种功能，如服务类只处理业务逻辑，不处理数据持久化
- **开闭原则 (OCP)**: 对扩展开放，对修改关闭，如添加新命令应创建新的Plugin类而非修改现有类
- **里氏替换原则 (LSP)**: 子类必须能够替换其父类，如服务实现类应完全符合接口定义
- **接口隔离原则 (ISP)**: 客户端不应依赖它不使用的方法，接口应根据功能拆分
- **依赖倒置原则 (DIP)**: 依赖抽象而非具体实现，如使用服务接口而非直接使用实现类

### DRY原则 (Don't Repeat Yourself)
- 避免代码重复，提取公共方法
- 使用工具类提取重复的功能
- 利用Spring的依赖注入机制避免代码重复

### KISS原则 (Keep It Simple, Stupid)
- 保持代码简单明了
- 避免过度设计和不必要的复杂性
- 一个方法只做一件事

### YAGNI原则 (You Aren't Gonna Need It)
- 不开发当前不需要的功能
- 只实现需求文档中明确的功能
- 在扩展功能前进行需求评估

### OWASP最佳实践
- 保护敏感数据，不在日志中记录密码等敏感信息
- 使用环境变量配置敏感信息
- 执行输入验证，防止恶意输入
- 实现适当的访问控制，如管理员权限检查

### 任务分解和解决方法
- 将任务分解为最小可实现单元
- 逐步解决问题，遵循增量开发方式
- 使用清晰的注释说明复杂逻辑

## 代码风格

### 命名规范
- **类名**: 使用PascalCase (如`UserService`)
- **方法名和变量名**: 使用camelCase (如`getUserById`)
- **常量**: 使用UPPER_SNAKE_CASE (如`MAX_RETRY_COUNT`)
- **包名**: 全小写 (如`online.bingzi.aetherbot.service`)

### 注释规范
- 类顶部注释：说明类的用途
- 方法注释：说明方法的功能、参数和返回值
- 复杂逻辑的代码段：添加必要的注释
- 使用JavaDoc标准格式

### 代码结构
- 按功能模块组织代码
- 相关类放在同一包下
- 遵循MVC架构分离关注点



